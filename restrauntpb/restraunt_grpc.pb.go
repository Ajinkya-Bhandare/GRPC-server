// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Add_RecieveDataClient is the client API for Add_RecieveData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Add_RecieveDataClient interface {
	AddRestraunt(ctx context.Context, in *Restraunt, opts ...grpc.CallOption) (*InsertResult, error)
	GetRestraunt(ctx context.Context, in *Restraunt_Request, opts ...grpc.CallOption) (*Restraunt_Request, error)
}

type add_RecieveDataClient struct {
	cc grpc.ClientConnInterface
}

func NewAdd_RecieveDataClient(cc grpc.ClientConnInterface) Add_RecieveDataClient {
	return &add_RecieveDataClient{cc}
}

func (c *add_RecieveDataClient) AddRestraunt(ctx context.Context, in *Restraunt, opts ...grpc.CallOption) (*InsertResult, error) {
	out := new(InsertResult)
	err := c.cc.Invoke(ctx, "/restraunt.Add_Recieve_data/Add_restraunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *add_RecieveDataClient) GetRestraunt(ctx context.Context, in *Restraunt_Request, opts ...grpc.CallOption) (*Restraunt_Request, error) {
	out := new(Restraunt_Request)
	err := c.cc.Invoke(ctx, "/restraunt.Add_Recieve_data/Get_restraunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Add_RecieveDataServer is the server API for Add_RecieveData service.
// All implementations must embed UnimplementedAdd_RecieveDataServer
// for forward compatibility
type Add_RecieveDataServer interface {
	AddRestraunt(context.Context, *Restraunt) (*InsertResult, error)
	GetRestraunt(context.Context, *Restraunt_Request) (*Restraunt_Request, error)
	mustEmbedUnimplementedAdd_RecieveDataServer()
}

// UnimplementedAdd_RecieveDataServer must be embedded to have forward compatible implementations.
type UnimplementedAdd_RecieveDataServer struct {
}

func (UnimplementedAdd_RecieveDataServer) AddRestraunt(context.Context, *Restraunt) (*InsertResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRestraunt not implemented")
}
func (UnimplementedAdd_RecieveDataServer) GetRestraunt(context.Context, *Restraunt_Request) (*Restraunt_Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestraunt not implemented")
}
func (UnimplementedAdd_RecieveDataServer) mustEmbedUnimplementedAdd_RecieveDataServer() {}

// UnsafeAdd_RecieveDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Add_RecieveDataServer will
// result in compilation errors.
type UnsafeAdd_RecieveDataServer interface {
	mustEmbedUnimplementedAdd_RecieveDataServer()
}

func RegisterAdd_RecieveDataServer(s grpc.ServiceRegistrar, srv Add_RecieveDataServer) {
	s.RegisterService(&Add_RecieveData_ServiceDesc, srv)
}

func _Add_RecieveData_AddRestraunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restraunt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Add_RecieveDataServer).AddRestraunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restraunt.Add_Recieve_data/Add_restraunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Add_RecieveDataServer).AddRestraunt(ctx, req.(*Restraunt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Add_RecieveData_GetRestraunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restraunt_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Add_RecieveDataServer).GetRestraunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restraunt.Add_Recieve_data/Get_restraunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Add_RecieveDataServer).GetRestraunt(ctx, req.(*Restraunt_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Add_RecieveData_ServiceDesc is the grpc.ServiceDesc for Add_RecieveData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Add_RecieveData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restraunt.Add_Recieve_data",
	HandlerType: (*Add_RecieveDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add_restraunt",
			Handler:    _Add_RecieveData_AddRestraunt_Handler,
		},
		{
			MethodName: "Get_restraunt",
			Handler:    _Add_RecieveData_GetRestraunt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restraunt.proto",
}
